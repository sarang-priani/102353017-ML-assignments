# -*- coding: utf-8 -*-
"""Assignment1(numpy).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WhcwILKnY-vFLUL3esZqjTV6bInpDHu-
"""

#Sarang Priani 102353017 3c61
import numpy as np
from itertools import product
from PIL import Image

# Q1(a)
arr = np.array([1, 2, 3, 6, 4, 5])
print(arr[::-1])

# Q1(b) -
array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
print(array1.flatten())
print(array1.ravel())

# Q1(c) -
arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[1, 2], [3, 4]])
print(np.array_equal(arr1, arr2))
print((arr1 == arr2).all())

arr3 = np.array([1, 2, 3, 4, 5, 1, 2, 1, 1, 1])
arr4 = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3])
print(np.array_equal(arr3, arr4))
print((arr3 == arr4).all())

# Q1(d)
x = np.array([1, 2, 3, 2, 1, 2, 1])
y = np.array([4, 4, 4, 2, 2, 1])
print(np.bincount(x).argmax(), np.where(x == np.bincount(x).argmax())[0])
print(np.bincount(y).argmax(), np.where(y == np.bincount(y).argmax())[0])

# Q1(e)
gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')
print(np.sum(gfg))
print(np.sum(gfg, axis=1))
print(np.sum(gfg, axis=0))

# Q1(f)
n_array = np.array([[55, 25, 15], [30, 44, 2], [11, 45, 77]])
print(np.trace(n_array))
w, v = np.linalg.eig(n_array)
print(w)
print(v)
print(np.linalg.inv(n_array))
print(np.linalg.det(n_array))

# Q1(g)
p1 = np.array([[1, 2], [2, 3]])
q1 = np.array([[4, 5], [6, 7]])
print(np.matmul(p1, q1))
print(np.cov(p1.T))
print(np.cov(q1.T))

p2 = np.array([[1, 2], [2, 3], [4, 5]])
q2 = np.array([[4, 5, 1], [6, 7, 2]])
print(np.matmul(p2, q2))
print(np.cov(p2.T))
print(np.cov(q2.T))
# Q1(h)
x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])
print(np.inner(x, y))
print(np.outer(x.flatten(), y.flatten()))
print(np.array(list(product(x.flatten(), y.flatten()))))

# Q2(a)
array = np.array([[1, -2, 3], [-4, 5, -6]])
print(np.abs(array))
print(np.percentile(array, 25))
print(np.percentile(array, 50))
print(np.percentile(array, 75))
print(np.percentile(array, 25, axis=0))
print(np.percentile(array, 50, axis=0))
print(np.percentile(array, 75, axis=0))
print(np.percentile(array, 25, axis=1))
print(np.percentile(array, 50, axis=1))
print(np.percentile(array, 75, axis=1))
print(np.mean(array))
print(np.median(array))
print(np.std(array))
print(np.mean(array, axis=0))
print(np.median(array, axis=0))
print(np.std(array, axis=0))
print(np.mean(array, axis=1))
print(np.median(array, axis=1))
print(np.std(array, axis=1))

# Q2(b)
a = np.array([-1.8, -1.6, -0.5, 0.5, 1.6, 1.8, 3.0])
print(np.floor(a))
print(np.ceil(a))
print(np.trunc(a))
print(np.round(a))

# Q3(a)
array = np.array([10, 52, 62, 16, 16, 54, 453])
print(np.sort(array))
print(np.argsort(array))
print(np.sort(array)[:4])
print(np.sort(array)[-5:][::-1])

# Q3(b)
array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])
print(array[array == array.astype(int)])
print(array[array != array.astype(int)])

# Q4(a)
def img_to_array(path):
    img = Image.open(path)
    arr = np.array(img)
    if len(arr.shape) == 2:
        np.savetxt("image_grey.txt", arr, fmt='%d')
    else:
        for i, channel in enumerate(['R', 'G', 'B']):
            np.savetxt(f"image_{channel}.txt", arr[:, :, i], fmt='%d')

# Q4(b)
def load_saved_file(filename):
    return np.loadtxt(filename)